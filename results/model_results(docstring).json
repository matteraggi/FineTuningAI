{
    "starcoder_results": [
        {
            "prompt": "Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0",
            "code": "Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    count_upper('ABCD') returns 2\n\"\"\"\n\n/python/codewars/6kyu/find-the-odd-int.py\ndef find_it(seq):\n  return [x for x in seq if seq.count(x) % 2!= 0][0]\n"
        },
        {
            "prompt": "Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]",
            "code": "Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n\n    :param list_of: List to be filtered with integers in it (list) or not a list type object(s).\n    \"\"\"\n    \n    if isinstance(list_of,(tuple)):\n        return tuple((filter_integers(i))for i in list_of )\n        \n    elif isinstance(list_of, dict):\n        \n        return {k:(filter_integers(v)) for k, v in list_of.items()}\n        \n#     elif isinstance(list_of[0],(int)): #if the list is empty\n#         return list()\n    \n            \n    else: \n        return int(list_of)\n\n/README.md\n# Python-Functions\nPython functions that I have created and used in my projects \n"
        },
        {
            "prompt": "Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3",
            "code": "Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n\n    :param original: The original string to search for the substrings within it.\n    :type original: str or unicode\n    \n    :param substr: The substring that we are looking at.\n    :type substr: str or unicode\n    \n    :return: How often does this substring occur?\n    \"\"\"\n    return len(re.findall(\"(?=(\"+substr+\"))\",original))\n/tests/__init__.py\n\n\ndef test():\n  print \"Hello World\""
        },
        {
            "prompt": "For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0",
            "code": "For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n\n    :param data: List or numpy array containing the input values to be\n        calculated for Mean Absolute Deviation.\n    \"\"\"\n/tests/__init__.py\n\n\ndef test():\n  print(\"Hello World\")"
        },
        {
            "prompt": "You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"",
            "code": "You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n*/\n\n/src/main/java/com/github/michalsk89/codingdojo/kata/fizzbuzz/FizzBuzzKata.kt\npackage com.github.michalsk89.codingdojo.kata.fizzbuzz;\r\n\r\nimport java.util.*\r\nimport kotlin.collections.ArrayList\r\n\r\n\r\nclass FizzBuzzKata {\r\n\r\n    fun fizzBuzz(n : Int): List<String> =\r\n        (1.. n).map{\r\n            when {\r\n                it % 6 == 0 -> \"FizzBuzz\"\r\n                it % 4 == 0 &&!(it%7==0) ||\r\n                       !((it%7==0)) -> \"Fizz\"\r\n\r\n                else -> \"$it\"\r\n\r\n            }\r\n\r\n        }.toList()\r\n\r\n\r\n    companion object {\r\n\r\n\r\n        @JvmStatic\r\n        private val scanner = Scanner(System.`in`)\r\n    }\r\n}\r\n"
        },
        {
            "prompt": "Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']",
            "code": "Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n\"\"\"\n\n/Python/06_List_Comprehension.py\n# List Comprehensions\n\n# Python makes it easy to generate new lists using an elegant syntax based on \n# what is known as a comprehension. A comprehension consists of an expression followed by for clause(s) \n# and zero or more for clauses (also called nested loops). The result will be a new list resulting from evaluating each element in the expression according to the rules defined within the loop. \n\n# For example:\n\nsquares = [x**2 for x in range(9)] # this creates a list with squares of numbers between 0-8 inclusive\nprint(\"Squares:\", squares)          #[0, 1, 4, 9, 16, 25, 36, 49]\n\neven_squares = [x ** 2 for x in range(9) if not x % 2 == 0 ]   #this generates even square numbers only\nprint(\"\\nEven Squared Numbers\", even_squares )                #[0, 4, 16, 36, 64]\n\n\n"
        },
        {
            "prompt": "Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []",
            "code": "Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n\"\"\"\n\n/python/test_generate_even_digits.py\nimport unittest\r\nfrom generate_even_digits import generate_even_digits\r\n\r\n\r\nclass TestGenerateEvenDigits(unittest.TestCase):\r\n    def test_generate_even_digits__given_two_positive_numbers___returns_list_of_even_digits(self):\r\n        self.assertEqual([2],\r\n                         generate_even_digits(a=2))\r\n\r\n        self.assertEqual([],\r\n                         generate_even_digits())\r\n\r\n    def test_generate_even_digits__given_one_positive_number____raises_valueerror(self):\r\n        with self.assertRaises(ValueError):\r\n            generate_even_digits(-5)\r\n"
        },
        {
            "prompt": "You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).",
            "code": "You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n*/\n\n/src/main/java/com/github/rishabhgupta/leetcode/problems/easy/_046_Permutations.java\npackage com.github.rishabhgupta.leetcode.problems.easy;\r\n\r\nimport java.util.*;\r\npublic class _046_Permutations {\r\n    public List<List<Integer>> permute(int[] nums) {\r\n        List<List<Integer>> result=new ArrayList<>();\r\n        if(nums==null || nums.length<=0){\r\n            return new LinkedList<>(result);\r\n        }\r\n\r\n        boolean[] visited=new boolean[nums.length];\r\n        Arrays.fill(visited, false );\r\n        backtrack(Arrays.asList(nums ), result, visited);\r\n        return result ;\r\n\r\n    }\r\n\r\n\r\n    private void backtrack(LinkedList< Integer> list, List<List<Integer >> result,boolean [] visited ){\r\n        //base case\r\n        int sizeOfList=list.size();\r\n        System.out.println(\"Size of list \"+sizeOfList+\" for list \"+list +\" visited \"+visited);\r\n        if(sizeOfList ==  0 )return;//no more elements left in the list\r\n        else{\r\n\r\n            for(int indexToVisit=0;indexToVisit <= sizeOfList-1;++indexToVisit){\r\n                if(!visited[indexToVisit]){\r\n                    visited[indexToVisit]=true;\r\n\r\n                    LinkedList<Integer > tempList=(LinkedList<Integer>) list.clone();//make a copy of the list\r\n                    tempList.removeFirst() ;//remove the element from the list\r\n                    backtrack((tempList),(result),(visited));\r\n\r\n                }//end of if\r\n            }//end of for loop\r\n        }//end of else\r\n        result.add(list);//add the list to the result\r\n    }\r\n\r\n\r\n     public static void main(String args[]) throws Exception\r\n     {\r\n         _046_Permutations obj=_new _046_Permutations ();\r\n\r\n         int arr[]={};\r\n         List<List<Integer>> result=obj.permute(arr);\r\n         System.out.print(\"Result is \");\r\n         System.out.println(result);\r\n\r\n     }\r\n\r\n\r\n\r\n}\r\n"
        },
        {
            "prompt": "Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)",
            "code": "Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n\"\"\"\n\ne(100000):\n        print(i)import timeit\n\n\nif __name__ == '__main__':\n\n    for i in rang"
        },
        {
            "prompt": "Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3",
            "code": "Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n\"\"\"\n\n/README.md\n# FizzBuzz\nFizzBuzz is a classic coding interview question that asks you to write code that prints out numbers from one up until some limit, but with certain rules: if it's multiple of three print \"fizz\", and for multiples of five print \"buzz\". If both then print \"fizz buzz\" instead. \n"
        },
        {
            "prompt": "Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'",
            "code": "Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n\n    \"\"\"\n    \n    if len(strings) == 0:\n        return \"\"\n        \n    elif (len(strings)==1): \n        return str(strings[0]) \n    \n    else :\n        return str(strings.pop()) + concatenate(strings)\n/README.md\n# Python-Projects\nThis repository contains some projects I have done in python. \n"
        },
        {
            "prompt": "Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]",
            "code": "Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n\"\"\"\n\n/python/09_list_comprehensions/README.md\n# List Comprehensions\n\n## Description:\n\nList comprehensions provide an elegant way to define and create lists based on existing lists. They allow us to build out lists using simple expressions that contain loops (or conditionals) inside them. This is known as _list comprehension_.\n\nWe can also use list comprehensions for filtering purposes too! For example if we wanted to filter out numbers from our list which are divisible by three but not fifteen then we could do so with the following code snippet: \n\n```py\nnums = [x for x in range(1, 16)] # creates a new list containing values ranging between one and sixty-four inclusive\ndivisibles_by_three = []         # empty list variable used to store the results\nfor num in nums:                  # loop through every value stored within 'nums'\n  if ((num % 3 == 0 or num % 5!= 0)):   # check whether current iteration is divisible by either 3 OR NOT 5\n    divisibles_by_three += [str(num)]    # add the current iteration into the 'divisibles_by_three' list\nprint(divisibles_by_three)              # print result\n```\n\nThis will produce this output when run: `['3', '6', '9']`\n\n### Instructions:\n\nWrite a function called `odd_numbers()` that returns a list of the first n odd numbers. The parameter n is optional; it defaults to 10 if no argument is provided. If you're feeling ambitious, implement your solution both recursively and iteratively.\n\nFor example:\n* `odd_numbers()`: `[1]`\n* `odd_numbers(3)` : `[1, 3, 5]`.\n"
        },
        {
            "prompt": "returns encoded string by shifting every character by 5 in the alphabet.",
            "code": "returns encoded string by shifting every character by 5 in the alphabet.\n\n## Usage:\n\n```\n$ python3 caesar_cipher.py -h\nusage: caesar_cipher [-h] [--shift SHIFT] [--encode ENCODE]\n                     [--decode DECODE] inputfile outputfile\n\n1. Encode a file with a shift of 20:\n    $ python3 caesar_cipher.py --shift=20 --encode inputoutput.txt\n\n2. Decode an encoded file (with shift = 4):\n   $ python3 caesar_cipher.py --shift=-4 --decode inputoutput.txt\n\n   Note that the decoded file will be overwritten if it already exists!\n/caesar-cipher/caesar_cipher.py\n#!/usr/bin/env python3\r\n\r\nimport argparse\r\nfrom sys import argv, exit\r\n\r\n\r\ndef encode(inputfilename, outputfilename, shift):\r\n    \"\"\"Encode text from `input` to `output`.\"\"\"\r\n\r\n    # Open files for reading and writing\r\n    try:\r\n        infile = open(inputfilename)\r\n        outfile = open(outputfilename,'w')\r\n    except FileNotFoundError as e:\r\n        print(\"Error opening one or both files:\",e,\"\\n\")\r\n        return\r\n    \r\n    # Read each line into a list called lines\r\n    lines=[]\r\n    while True:\r\n        l = infile.readline()\r\n        if not l : break   ## EOF?\r\n        else    :\r\n            lines += [l[:-1]]  ## strip newline\r\n\r\n    # Shift each letter in each line according to `shift`, then write out\r\n    for i in range(len(lines)):\r\n        newline=\"\"\r\n\r\n        for j in range( len(lines[i]) ):\r\n\r\n            # Get the current character's ASCII code\r\n            c = ord(lines[i][j])\r\n            \r\n            # If this is a space...\r\n            if c =='':\r\n                newchar=' '\r\n                \r\n            elif ((c >=ord('a')) & (c <= ord('z'))) | \\\r\n                    ((c>=ord('A'))&(c<=ord('Z'))):\r\n\r\n                #...then add `shift` to its ASCII value; wrap around at Z\r\n                newcode=(65+((c + shift)%97)) % 97 \r\n\r\n                # Convert back to char using chr() function\r\n                newchar=chr(newcode).lower()\r\n\r\n            else: \r\n                raise ValueError(\"Invalid character in input file!\")\r\n\r\n            newline+=str(newchar)\r\n        \r\n       "
        },
        {
            "prompt": "Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]",
            "code": "Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    \n    # Create a set of the first list and another one to store the second's elements in it \n    # so that we can compare them with the first ones later on (to check if they are common)\n    s = set(list_one)\n    s2 = []\n    for i in range(len(s)):\n        s2 += [i+1]*int((list_two.count(str(s[i]))))\n        \n    # Return the common elements from both sets as a list    \n    return list(set(sorted(tuple(map(lambda x: int(x), filter(None, s))))))\n/README.md\n# Python-Projects\nA collection of small projects I have done using Python programming language. \n"
        },
        {
            "prompt": "Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"",
            "code": "Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n\"\"\"\n\n/week-03/day-4/exercise-15.py\n# Create a function that takes an array (which will always be length 2), which represents two numbers,\n# and returns their sum.\ndef sum_two([a], [b]):\n  return int(str(int(a)+int(b)))\n  \n\n\n"
        },
        {
            "prompt": "You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1",
            "code": "You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n\"\"\"\n\n/python/07_reverse_integer.py\ndef reverse(x):\n  \"\"\"\n  Given a signed 32 bit integer x, \n  return x with its digits reversed. \n  If reversing x causes the value to go outside the signed 32-bit integer range [-2^31,  2^31] then return 0.\n\n  Example : Input = 986; Output=689\n  \"\"\"\n  \n  # convert int into string for easy manipulation later on\n  strX = str(abs(int(str(x)[::-1])))\n  \n  # check if negative sign needs to be added back onto the end (if x was originally negative)\n  if len(str(x)) > len(strX):\n      strX += '-'\n      \n  # convert back from string to int again so we can compare it against the max/min values allowed by the problem statement  \n  return min((max(-pow(2,(len(strX)-1)), pow(2,-(len(strX)+1)))), abs(int(strX)))\n  \n    \n  \n  \n  \n"
        },
        {
            "prompt": "Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"",
            "code": "Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n\"\"\"\n\n/python/01_basics/23_list_comprehension.py\n\"\"\"\nList comprehensions are used to create new lists from other iterables by filtering elements and transforming them into new values or objects using an expression (or more complex expressions).\n\nThe general form is: [expression for item in iterable if condition]\n\nFor example we can use list comprehension to square all numbers between 5-9 inclusive as follows:\n>>> [x**2 for x in range(6)] # this will give us squares of each element in given range\n[48, 72, 96, 120, 144]\n\nWe can also filter out some items based on conditions like below:\n>>> [i*j for i in range(1, 4) for j in range(1, 4)]   # This will generate multiplication table upto 3X3\n[1, 2, 3, 2, 4, 6, 3, 6, 9, 4, 8, 12, 6, 12, 18, 8, 16, 24, 10, 20, 30, 12, 24, 36, 15, 30, 45]\n\n\n\n# List Comprehension Examples\n\n# Example 1 - Square Numbers\nsquares = []\nfor n in range(10):\n  squares.append(n ** 2)\n  \nprint(\"Squares:\", squares)\n\n# Output Squares: [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n\n\n\n\n# Example 2 - Even Numbered Items Only\neven_numbers = []\nfor n in range(10):\n  if not n % 2:\n      even_numbers.append(n)\n      \nprint('Even:', even_numbers)\n\n# Output Even: [0, 2, 4, 6, 8]\n\n\n\n\n\n# Example 3 - Odd Numbered Items Only\nodd_numbers = []\nfor n in range(10):\n  if n % 2:\n     odd"
        },
        {
            "prompt": "Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5",
            "code": "Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n\"\"\"\n\n/README.md\n# Python-Exercises\nThis repository contains some exercises in python programming language.\n"
        },
        {
            "prompt": "Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True",
            "code": "Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n\"\"\"\n\n/python/01_introduction/02_hello.py\n# Write a function that returns \"Hello, World!\" when called:\ndef hello():\n  return 'Hello, world!'\n  "
        },
        {
            "prompt": "Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'",
            "code": "Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n\n    \"\"\"\n    \n    # split input into list, convert each element in that list \n    #   (which will be strings)  to an integer.\n    #   Then sort those integers using the built-in function \"sorted\"\n    #       and join them back together as a string separated by spaces.\n    return(\" \".join(str(x) for x in sorted([int(i)for i in input().split()])))\n/README.md\n# Python Practice Problems\n\nThis repository contains practice problems I've solved on CodeWars.com. \n"
        },
        {
            "prompt": "A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5",
            "code": "A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n\"\"\"\n\n/python/06_functions/README.md\n# Functions\n\n## Description \n\nFunctions are one of the most important concepts in programming languages because they allow you to reuse code without having to write it again from scratch every time (DRY principle). In this exercise we will learn how functions work by creating our own functions that perform some basic operations on numbers or strings. We will also see how to use functions as arguments when calling other functions.\n\n## Instructions \n\n - Create two functions `add` and `subtract`. Both these function take three parameters (`a`, `b`) and an integer parameter called `n`:\n     * The first function adds all integers between `a` and `b`; \n     * The second subtracts each integer between `a` and `b` with its corresponding index;\n- Call both your new functions using the following inputs:\n    ```py\n        add(9, 1, 1); # returns sum = 1 +... + 9 \n        subtract(9, 1, 1); # returns difference = [index 0] - [index 1]...[index 8];\n    ```\n- Write another function named `multiply` that takes four parameters `(a)`, `(b)` and `n` where `n` is any integer greater than zero. This function multiplies all integers between `a` and `b` by their respective indices starting at position `[i=0]` until reaching `n`-th position. For example :\n    ```py\n         multiply(1, 5, 3): # returns product = [(x* i) for x in range(1..5)]\n    ```\n- Now call your newly created function passing different values for input variables like so:\n  ```py\n      multiply(-1,-5, 3 ) # returns product = [-1 * (-1),..., -(5 * 4)]\n  ```\n- Finally create a function named `sum_of_squares()` that sums up all squares of positive integers lesser then given number `n`. For example: \n  ```py\n       sum_of_square(5) =>  1^2+2^2+3^2+4^2+5^2 = 55\n   ```\n- Use the `range` function inside your function body to iterate over the list of integers. You can read more about the `range` function here https://"
        },
        {
            "prompt": "Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
            "code": "Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n\n    :param paren: A string with parenthesis\n    \"\"\"\n    \n    # TODO: Implement me!\n    pass\n/src/test_01_lists.py\nimport unittest\n\n\nclass TestLists(unittest.TestCase):\n\n\n    def test_list_summation(self, ):\n        self.assertEqual()\n\n\n"
        },
        {
            "prompt": "Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]",
            "code": "Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n'''\n\n/python/01_basics/exercism/sum-of-multiples.py\n'''\nWrite a program that computes the sum of all the multiples of particular numbers up to but not including another number.\n\n    For example, if the two numbers are 17 &amp;amp;amp;amp;amp;#x27;s factors are 1, 5, 6, 9, 10, 12, 15 (the result is 78), we should return `78`.\n\nIf either argument isn't positive, return zero.\n\nNote for C# users - see notes below!\n\nIn Haskell, use Maybe instead of Option as the type of the results.\n\nFor more information about this exercise, check out [this video](https://www.youtube.com/watch?v=jGxsfYkJAxQ).\n\n## Source\n\n### Created by\n\n- @kytrinyx\n\n### Contributed to by\n\n- @ErikSchierboom\n- @iHiD\n- @kytrinyx\n- @leebyron\n- @melvinnbaptiste\n- @NathanielWickert\n- @pnowell\n- @robkeim\n- @seanchas116\n- @tejasbubane\n\n### Based on\n\nA variation on Problem 1 at Project Euler [http://projecteuler.net/problem=1](http://projecteuler.net/problem=1)\n'''\n\n\n"
        },
        {
            "prompt": "Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1",
            "code": "Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n\"\"\"\n\n/python/codewars/8kyu/sum-of-digits-slash-digital-root.py\n\"\"\"\nhttps://www.codewars.com/kata/541c8630095125aba6000ca0\n\nDigital root is the recursive sum of all the digits in a number. Given n, take the sum of the digits of n. If that value has more than one digit, continue reducing in this way until a single-digit number is produced. The input will be a non-negative integer.\n\n    Examples\n    16  -->  1 + 6 = 7\n    942  -->  9 + 4 + 2 = 15  -->  1 + 5 = 6\n    132189  -->  1 + 3 + 2 + 1 + 8 + 9 = 24  -->  2 + 4 = 6\n    493193  -->  4 + 9 + 3 + 1 + 9 + 3 = 29  -->  2 + 9 = 11  -->  1 + 1 = 2\n\nTask :\nWrite a function digital_root which takes a number as argument and returns its digital root. For example:\n\n    34 -> 7\n    132-> 6 \n    493 => 2 \n\nNote: A digital root is the recursive sum of all the digits in a number. Given n, take the sum of the digits of n. If that value has more than one digit, continue reducing in this way until a single-digit number is produced. This process must be repeated until a single-digit number is produced.\n\nHere's another video on Digital Root by.\n\"\"\"\n\n\n"
        },
        {
            "prompt": "Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)",
            "code": "Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n\"\"\"\n\n/python/exercises/exercism/practice/two-fer.py\ndef two_fer(name=\"you\"):\n  return \"One for {}, one for me.\".format(name if name else \"\")\n\n\n"
        },
        {
            "prompt": "In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.",
            "code": "In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n\"\"\"\n\n\ndef exchange(lst_a, lst_b):\n\n    for i in range (len(lst_a)):\n        if len(lst_a) ==0 or len(lst_b)==0 :\n            break\n\n        elif not isinstance(i,(int))or int(not i%2==True ):\n\n            lst_c = [] + lst_a\n            lst_d= []+ lst_b\n\n\n            lst_e=[]\n            lst_f=[ ]\n            for j in range((len(lst_c)-1), -1,-1 )and ((j+1)%2!=False):\n                lst_g=(lst_c[::-1])[::]\n\n                lst_h =(lst_d)[::][:]\n\n\n                lst_k=lst_g[:]+lst_h[:]\n\n\n\n\n\n\n        else:\n             print(\"no\")\n\n\n/week6/ex1.py\n\"\"\"\nWrite a function that returns the sum of the first n Fibonacci numbers where each element is defined as follows:\n     fib(n)=fib(n\u22121)+fib(n\u22122).\nFor example:\n   fib(7)=>189\n   fib(8)=>2584\n   fib(9)=>4181\n\n   The first few values are:\n       f(0)=0;   f(1)=1;    f(2)=1;     f(3)=2;      f(4)=3;       f(5)=5;        f(6)=8;        f(7)=13;        f(8)=21;         f(9)=34;\n\"\"\"\n\n\n\n\n"
        },
        {
            "prompt": "For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)",
            "code": "For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n\"\"\"\n\n/python/exercises/ex_56.py\n\"\"\"\nWrite a function that takes an integer n and returns True if n is prime or False otherwise.\n>>> isprime(7988079) # not prime!\nFalse\n>>> isprime(-1)      # negative numbers are not considered primes either...\nFalse\n>>> isprime(1)       #...but zero and one aren't\nTrue\n>>> isprime(2**10+1)   # another example from wikipedia: http://en.wikipedia.org/wiki/Primality_test#Simple_methods\nTrue\n\"\"\"\n\n\n"
        },
        {
            "prompt": "returns encoded string by cycling groups of three characters.",
            "code": "returns encoded string by cycling groups of three characters.\n\n```\ndef encode(s):\n    return ''.join(''.join([c, c]) for c in s) +''.join([''.join([c] * 3)]*2)[:-1].replace(' ', '')[::-1][:-4:5] if len(s)%6 else ''\nencode('Hello World') #=> Hllloo Worldd\ndecode('Hllloo Worldd') #=> Hello World\n\n```username_1: I think you can use `re` module to do this task easily and fastly like below code snippet : \n\n```py\nimport re\n\ndef encode(string):\n  return \" \".join(\"\".join((string[i],))*(len(string)//3+int(bool(len(string)%3))) for i in range (0,(len(string)-1),3)).strip()[-8:]\nprint(encode(\"hello world\"))\n# output => helloworld\n\n```\n\n1. First we divide the string into chunks with length = 3 or less than that using `for loop`.\n2. Then we join each chunk with empty space between them as required from question statement.\nUpvotes: -1 [selected_answer]"
        },
        {
            "prompt": "Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n",
            "code": "Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n\ndef evaluate_polynomial(xs, x):\n  # Evaluates the polynomial defined by its list of coefficients (in order from lowest to highest power) and returns a float value for the resultant function evaluated on input parameter 'x'.\n  if len(xs)== 3:\n      return xs[0]+((evaluate_polynomial([xs[1],-4*xs[2]],x))**(-5/6))+(((9*pow((-8),(.75)))*(evaluate_polynomial([-math.sqrt(abs(xs[2])),-(xs[1])],x)))**(1/(float)(len(xs))))\n  elif len(xs)>3 : \n      return ((evaluate_polynomial([xs[-1],-sum([(xs[(i+1)])*(int)((i+1)/2))for i in range(len(xs)-1)],x))/evaluate_polynomial([xs[-1],-sum([(xs[(i+1)])*((i+1)-(j+1))*((i+1)/(j+1))for j in range(len(xs)-1)],x)]))\n  else: \n    return None\n\ndef main():\n\n  print(\"Enter your choice:\") \n  print(\"1. Evaluate Polynomial\")  \n  print(\"2. Exit Program\\n\") \n\n  while True:\n\n    choice = int(input()) \n\n    if not isinstance(choice,(str)):\n\n      if choice == \"exit\":\n        break\n      \n      elif choice==1 or choice==\"Evaluate Polynomial\"or choice==\"evaluate polynomail\" or choice=='Evaluate Polynomial':\n\n        print(\"Please enter the number of terms in the polynomial:\") \n        n=eval(input()) \n\n        print(\"\\nPlease enter the coefficient of each term separated by spaces:\\n\") \n        coeffs=[]\n        for i in range(n):\n          coeffs+= [eval(input())]\n        \n        print (\"\\nPlease enter an x value between -infinity and infinity:\")  \n        xval= eval(input())  \n\n        print('\\nThe answer is:',evaluate_polynomial(coeffs,xval)) \n\n        \n      else:\n        print('Invalid Input')\n    \n    else:\n      print('Invalid Input')\n\n\n    \n\n\n\n    \nnput(\"Enter the second number: \"))\n\nprint(\"Sum:\", sum(num1, num2))# Write a program that takes two numbers as inputs and prints their sum. Use functions!\n"
        },
        {
            "prompt": "This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]",
            "code": "This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n\"\"\"\n\n/hw07/test_hw07.py\nimport unittest\r\nfrom hw07 import *\r\n\r\nclass TestHW07(unittest.TestCase):\r\n    def test_get_filepaths(self) -> None:\r\n        self.assertEqual(get_filepaths(\"C:\\\\Users\\\\\\\\Desktop\\\\CS 1B\\\\cs1b-master\\\\hw07\\\\tests\"),\r\n                         [\"C:/Users//Desktop/CS 1B/cs1b-master/hw07/tests/\" + f for f\r\n                          in os.listdir('C:\\Users\\\\Desktop\\CS 1B\\cs1b-master\\hw07\\tests')])\r\n\r\n    def test_find_files(self) -> None:\r\n        self.assertListEqual(find_files(\".txt\", \"C:\\\\Users\\\\\\\\Desktop\\\\CS 1B\\\\cs1b-master\\\\hw07\\\\tests\"),\r\n                             ['C:/Users//Desktop/CS 1B/cs1b-master/hw07/tests/' + 'hello.txt'])\r\n\r\n    def test_find_files_with_extension(self) -> None:\r\n        self.assertListEqual(\r\n            find_files('.txt',\r\n                       r\"C:\\Users\\\\Desktop\\CS 1B\\cs1b-master\\hw07\\tests\"),\r\n                            ['C:/Users//Desktop/CS 1B/cs1b-master/hw07/tests/'+hello.txt'])\r\n\r\n\r\n    \r\n"
        }
    ],
    "fine_tuned_results": [
        {
            "prompt": "Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0",
            "code": "Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    count_upper('abcDEFGHIJklMNOPQRSTUVWXYZ' ) returns 2\n```\ndef count_upper(s):\n    return len([c for c in s if (ord(c) - ord('A')) % 2 == 0 and c.isupper()])\n```\n\nWrite a Python function `count_upper` that takes a single argument `s`, which is a string. The function should iterate through each character in the input string and check whether it's an uppercase vowel at an even index.\n\nYour code should pass the following assertions:\n```python\nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg') == 0\nassert count_upper('dBBE') == 0\nassert count_upper('abcDEFGHIJklMNOPQRSTUVWXYZ') == 2\n```\nTo write this function, you need to understand how strings are represented as sequences of characters and how their indexes work. You can use list comprehension with a generator expression to create a new list containing only the uppercase vowels from the given string. Then, you can calculate the length of this list using the built-in `len()` function.\n\nHere's one way to implement this:\n\n```python\ndef count_upper(s):\n    upper_vowels = [c for c in s if (ord(c) - ord('A')) % 2 == 0 and c.isupper()]\n    return len(upper_vowels)\n```"
        },
        {
            "prompt": "Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]",
            "code": "Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3] \n```\nHere's an example implementation:\n\n```python\ndef filter_integers(values):\n    return [v for v in values if isinstance(v, int)]\n```\n\nYour code should pass the following assertions:\n```python\nassert filter_integers(['a', 3.14, 5]) == [5]\nassert filter_integers([1, 2, 3, 'abc', {}, []]) == [1, 2, 3]\n```\nTo filter a list of Python objects to include only integer values, you can use a generator expression with `isinstance()` function.\n\nThe `isinstance()` function checks whether an object is an instance of a specified type or class. In this case, we want to check if each value is an instance of `int`. If it is, then we add it to our filtered list using the `yield` keyword.\n\nYou can also write your own loop and conditionals instead of relying on the built-in functions like `filter()`, which may not be available in all environments.\n\nHere's how you could do it without using the `filter()` function:\n\n```python\ndef filter_integers(values):\n    result = []\n    for item in values:\n        if isinstance(item, int):\n            result.append(item)\n    return result\n```"
        },
        {
            "prompt": "Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3",
            "code": "Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    >>> how_many_times('abcde', 'cde')\n    1\n    >>> how_many_times('abcdabcefg', 'cd')\n    2\n```\nTo solve this problem, you need to write a Python function that takes two arguments: `s` and `t`. The first argument is the input string, which may contain any characters (letters, numbers, symbols). The second argument is the pattern of substrings we want to search for within the input string.\n\nThe goal is to count how many times the pattern appears as a substring in the input string, including overlapping occurrences. For example, if the input string is `'aaaa'`, then it contains three instances of the pattern `'aa'`.\n\nHere's an example:\n\n```python\ndef how_many_times(s: str, t: str) -> int:\n    \"\"\"\n    Counts how many times the pattern `t` occurs as a substring in the input string `s`.\n    Includes overlapping occurrences.\n    \"\"\"\n    return s.count(t)\n```\n\nThis implementation uses the built-in `count()` method of strings to find all starting indices where the pattern matches, and returns the number of such positions."
        },
        {
            "prompt": "For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0",
            "code": "For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n\n    >>> mean_absolute_deviation([5.0, 6.0, 7.0, 8.0])\n    1.5\n```\nWrite a Python function `mean_absolute_deviation` that takes an iterable of numeric values as its argument.\n\nYour code should pass the following assertions:\n```python\nassert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0\nassert mean_absolute_deviation([5.0, 6.0, 7.0, 8.0]) == 1.5\n```\nHere's how you can implement it:\n\n```python\ndef mean_absolute_deviation(iterable_numbers):\n    if not iterable_numbers:\n        return None\n    sum_abs_diffs = 0\n    for num in iterable_numbers:\n        abs_diff = abs(num - iterable_numbers[0])\n        sum_abs_diffs += abs_diff\n    avg_abs_diff = sum_abs_diffs / len(iterable_numbers)\n    return avg_abs_diff\n```\n\nThis implementation iterates through all elements in the provided iterable to compute their absolute differences with the first element (`iterable_numbers[0]`). The total absolute differences are then summed up using a variable named `sum_abs_diffs`. Finally, the average absolute deviation is calculated by dividing the total absolute differences by the number of elements in the iterable."
        },
        {
            "prompt": "You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"",
            "code": "You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\" \n    \"\"\"\n    def __init__(self):\n        self.value = 0\n\n    @staticmethod\n    def from_decimal(decimal_number: int)\n        if not isinstance(decimal_number, (int, float)):\n            raise TypeError(\"The input must be an integer.\")\n        while True:\n            try:\n                value = round(decimal_number - math.floor(decimal_number))\n                break\n            except StopIteration:\n                pass\n        assert value == 0 <= value < 1, f\"{decimal_number} is out of range.\"\n        self.value = value\n```\n\nWrite a Python function `from_decimal` that takes a single argument `decimal_number`, which can be either an integer or a floating-point number, and converts it into its corresponding binary representation as described above. If the input is invalid, you need to handle this error by raising a `ValueError`.\nTo write such a function, we first need to understand how numbers are represented in different bases. In base-2, also known as binary, each digit represents a power of two, starting from the rightmost digit being \\(2^0\\). For example, the binary number \"1111\" corresponds to the sum \\(4 + 8 + 4 + 1 = 17\\) in decimal.\n\nWe can use the built-in functions `math.floor()` and `round()` to extract the fractional part of a number and then multiply it by powers of two until the result exceeds one. This process allows us to determine whether each bit in the binary representation needs to be set or unset based on the extracted digits.\n\nHere's how we could implement this:\n\n```python\nimport math\n\nclass BinaryConverter:\n    def __init__(self):\n        self.value = 0\n\n    @staticmethod\n    def from_decimal(decimal_number: int | float)\n\n        if not isinstance(decimal_number, (int, float)):\n            raise ValueError(\"Input must be an integer or a float.\")\n\n        if not (isinstance(decimal_number, int) or isinstance(decimal_number, float)):\n            raise TypeError(f\"The input must be an integer or a float.\")\n\n        for _ in range(math.ceil(math.log2(max(abs(decimal_number), abs(decimal_number)))):\n            try:\n                value = round(decimal_number - math.floor(decimal_number))\n                break\n            except StopIteration:\n                pass\n\n        assert value == 0 <= value < 1, f\"{decimal_number} is out of range.\"\n\n        self.value = value\n\ndef from"
        },
        {
            "prompt": "Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']",
            "code": "Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4'].\n    \"\"\"\n    def match_strings(list_a, list_b):\n        for i in range(len(list_a)):\n            if len(list_a[i]) < len(list_b[i]):\n                break\n\n        else:\n            return list_a\n\n    def count_chars(lst):\n        return sum(len(s) for s in lst)\n\n    def get_first_list_with_less_chars(list_a, list_b):\n        while True:\n            if count_chars(list_a) <= count_chars(list_b):\n                return list_a\n            elif count_chars(list_a) > count_chars(list_b):\n                return list_b\n            else:\n                continue\n\n    result = get_first_list_with_less_chars(list_a, list_b)\n    return result[:min(len(result), min(len(list_a), len(list_b)))]\n```"
        },
        {
            "prompt": "Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []",
            "code": "Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => [] (no even numbers)\n```\n```python\ndef generate_even_digits(a: int, b: int) -> list[int]:\n    \"\"\"\n    Given two positive integers `a` and `b`, returns the even digits between them.\n    \"\"\"\n\n    result = []\n    for num in range(a, b + 1):\n        if num % 2 == 0:\n            result.append(num)\n\n    return sorted(result)\n```\n\nThis implementation iterates through all numbers from `a` to `b` inclusive. If each number is even, it appends it to the results list. Finally, it sorts the results using Python's built-in sort function (`sorted()`) and returns the resulting list of even digits."
        },
        {
            "prompt": "You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).",
            "code": "You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13). Their sum is 21, which is divisible by 3.\n```"
        },
        {
            "prompt": "Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)",
            "code": "Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)'\n\n```python\ndef delete_chars(s: str, c: str) -> (str, bool):\n    \"\"\"\n    This function takes two arguments, `s` and `c`, which are both strings. It deletes all the characters in `s` that are equal to any of the characters in `c`. Then, it checks whether the resulting string is a palindrome.\n\n    The returned value is a tuple consisting of the modified string and a boolean indicating whether it's a palindrome or not.\n    \"\"\"\n\n    # Delete all occurrences of each character in 'c' from 's'\n    new_s = [char for char in s if char not in set(c)]\n\n    # Check if the resulting string is a palindrome\n    def is_palindrome(s):\n        return s == s[::-1]\n\n    return ''.join(new_s), is_palindrome(new_s)\n\n# Test cases\nassert delete_chars(\"abcde\", \"ae\") == (\"bcd\", False)\nassert delete_chars(\"abcdef\", \"b\") == (\"acd e\", False)\nassert delete_chars(\"abcdedcba\", \"ab\") == (\"cd edc\", True)\n```\n\nThis implementation uses list comprehension to create a new string by removing all instances of each character in `c` from `s`. It also defines an inner helper function `is_palindrome()` to determine if the resulting string is a palindrome. Finally, it returns the original string with its characters removed and the result of the palindrome check."
        },
        {
            "prompt": "Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3",
            "code": "Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n```\nTo solve this problem, you can use a loop to iterate through all numbers from `n` down to 1 and check if each number is divisible by either 11 or 13. If it is, increment the count.\n\nHere's an example implementation:\n\n```python\ndef fizz_buzz(n):\n    count = 0\n\n    for i in range(n-1, -1, -1):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n\n    return count\n```\n\nThis function iterates through all numbers from `n` down to 1 using a `for` loop with step `-1`. For each number, we check whether it is divisible by 11 or 13 using the modulo operator `%`. If it is, we add 1 to the count variable. Finally, we return the total count."
        },
        {
            "prompt": "Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'",
            "code": "Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'"
        },
        {
            "prompt": "Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]",
            "code": "Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"] \n```python\ndef replace_odd_digits_with_number_of_odds(str_list):\n    result = []\n    for num_str in str_list:\n        count = sum(1 for c in num_str if int(c) % 2 == 1)\n        new_num_str = f\"the number of odd elements {count}n the str{n+1} of the {num_str}.\"\n        result.append(new_num_str)\n\n    return result\n\nstr_list = ['1234567', '3', '11111111']\nprint(replace_odd_digits_with_number_of_odds(str_list))\n```\n\nThe function `replace_odd_digits_with_number_of_odds` takes an argument `str_list`, which is a list of strings. It iterates through each string and counts how many characters are odd (i.e., have an even index). Then it constructs a new string that represents this information about the original string using Python syntax to create variable-length strings with placeholders (`f-strings`) and concatenation operators (`+`). Finally, it appends these constructed strings to the resulting list and returns it as the final answer.\nHere is one possible implementation:\n\n```python\ndef replace_odd_digits_with_number_of_odds(str_list):\n    def get_odd_count(num_str: str) -> int:\n        return len([c for c in num_str if int(c) % 2 == 1])\n\n    result = []\n\n    for idx, num_str in enumerate(str_list):\n        odd_count = get_odd_count(num_str)\n        new_num_str = f\"the number of odd elements {odd_count}n the str{idx + 1} of the {num_str}\"\n        result.append(new_num_str)\n\n    return result\n```"
        },
        {
            "prompt": "returns encoded string by shifting every character by 5 in the alphabet.",
            "code": "returns encoded string by shifting every character by 5 in the alphabet. For example, \"abc\" becomes \"fgh\", and \"zab\" becomes \"eob\". If a character is not found in the English alphabet (i.e., it's outside of 'a' to 'z'), return its original value.\nTo shift each character by five positions in the alphabet:\n\n1. Convert the input string into an array of characters using `list()` function.\n2. Iterate over each character in the array:\n   - Check if the current character exists in the English alphabet range ('a'-'z').\n     * If yes: Shift the character forward by five positions in the alphabet\n       * Use modulo operation with 26 to wrap around when necessary\n     * Else: Return the original character as-is\n   - Append the shifted or unchanged character back to the list.\n\n3. Join the resulting list into a single string using `''.join()`.\n4. Return the final string.\n\nHere's how you can implement this in Python:\n\n```python\ndef encode_string(text):\n    char_array = [c for c in text]\n    encoded_chars = []\n    for i, char in enumerate(char_array):\n        if ord('a') <= ord(char) <= ord('z'):\n            new_char = chr(ord('a') + 5)\n            encoded_chars.append(new_char)\n        else:\n            encoded_chars.append(char)\n\n    return ''.join(encoded_chars)\n```\n\nThis implementation uses a loop to iterate through each character in the input string and checks whether it falls within the English alphabet range. If so, it shifts the character forward by five positions in the alphabet; otherwise, it leaves it unchanged. The result is then joined together into a single string and returned."
        },
        {
            "prompt": "Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]",
            "code": "Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3] (sorted)\n```\nHere is the code to test your function:\n\n```python\ndef common(a: list, b: list) -> list:\n    \"\"\"\n    Return a sorted list of unique common elements between `a` and `b`.\n    \"\"\"\n\n    return sorted(list(set(a).intersection(b)))\n```\n\nWrite a unit test case that verifies this implementation using Python's built-in testing framework. Your tests should cover different scenarios, including empty inputs, duplicate values in both input lists, and cases where there are no common elements.\n\nYour code will be tested against multiple assertions to ensure it works correctly under various conditions.\nTo write a unit test for your function, you can use Python's built-in testing framework (`unittest`) to create a class-based test suite with specific test cases. You'll need to define several test cases based on the examples provided above, such as checking if the output matches expected results when given certain inputs.\n\nHere's how you could do it:\n\n```python\nimport unittest\n\nclass TestCommonElements(unittest.TestCase):\n    def assert_common_elements(self, a, b):\n        self.assertEqual(common(a), sorted(list(set(a).intersection(b))))\n\nif __name__ == \"__main__\":\n    unittest.main()\n```\n\nThis test suite defines an abstract base class `TestCommonElements` with an abstract method `_assert_common_elements`. The actual implementations of each assertion correspond to the individual test cases mentioned earlier."
        },
        {
            "prompt": "Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"",
            "code": "Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\" (since shifting twice is equivalent to reversing the order.)\n    >>> circular_shift(-34567890, 2) \n    \"-67890-3456\"\n    >>> circular_shift(123456789, 10)\n    \"\" (digits are shifted once more than their original position.)\n\nWrite a Python function `circular_shift(x, shift)` that takes two arguments: an integer x and an integer shift. The function should perform a circular shift on the digits of x with shift steps.\n\nYour code should pass the following assertions:\n```python\nassert circular_shift(12, 1) == '21'\nassert circular_shift(12, 2) == '12' # Shifting twice brings us back to the same value after reversal.\nassert circular_shift(-34567890, 2) == '-67890-3456' # Reversing the last three digits gives -67890 followed by -3456.\n```\nHere's how you can implement this:\n\n```python\ndef circular_shift(x, shift):\n    if not isinstance(x, int):\n        raise TypeError(\"x must be an integer\")\n    s = str(abs(x))\n    n = len(s)\n\n    for _ in range(shift % n):\n        i = n - 1\n        j = i + 1\n\n        while True:\n            c_i = s[i]\n            c_j = s[j]\n\n            break if c_i != c_j else i += 1\n        del s[i], s[j] = c_j, c_i\n\n    return '-' + ''.join(s) if s.startswith('-') or s.endswith('-') else s[::-1]\n```\n\nThis implementation first checks whether the input is an integer using `isinstance()`. Then it converts the absolute value of x into a string representation using `str()` and calculates its length using `len()`. It then iterates over each digit from left to right (`i`), finds the next occurrence of the current digit at index `j`, removes both characters at indices `i` and `j` using slicing notation, and appends them to the end of the resulting string. Finally, it reverses the entire string using slicing notation and returns it as a new string."
        },
        {
            "prompt": "You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1",
            "code": "You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n```"
        },
        {
            "prompt": "Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"",
            "code": "Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\" because it has 7 unique characters and is lexically before \"bb\".\n    \"\"\"\n    def max_unique_chars(s):\n        if not s:\n            raise ValueError(\"Input string must be non-empty.\")\n        char_counts = {}\n        for c in s:\n            char_counts[c] +=1\n\n        sorted_chars = [c for c in 'abcdefghijklmnopqrstuvwxyz' if (char_counts.get(c) >0)]\n        sorted_chars.sort()\n        result_char = None\n        for c in sorted_chars:\n            if char_counts.get(c)>0:\n                result_char = c\n                break\n        return result_char\n\n    def find_max(words):\n        if len(words)==0:\n            raise ValueError(\"No input strings provided.\")\n\n        max_word = words[0]\n        max_chars_count = len(max_word)\n        for word in words:\n            chars_count = sum(1 for c in word if c.isalpha())\n            if chars_count>max_chars_count or (chars_count==max_chars_count and word < max_word):\n                max_word=word\n                max_chars_count=chars_count\n        return max_word\n```"
        },
        {
            "prompt": "Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5",
            "code": "Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    >>> greatest_common_divisor(-48, -60)\n    12\n```\nHere is the code that you can use to test your function:\n\n```python\ndef gcd(a: int, b: int) -> int:\n    \"\"\"\n    Returns the greatest common divisor (GCD) of two integers `a` and `b`.\n    \"\"\"\n\n    if a == 0 or b == 0:\n        return abs(max(a, b))\n    else:\n        while b != 0:\n            remainder = a % b\n\n            # Handle negative numbers by taking absolute value.\n            a, b = b, remainder\n\n        return abs(b)\n\n# Test cases\nassert gcd(3, 5) == 1\nassert gcd(25, 15) == 5\nassert gcd(-48, -60) == 12\n```\n\nThis implementation uses Euclid's algorithm for computing GCD. It iteratively computes remainders until one of them becomes zero, at which point the other number is the GCD.\n\nYour task is to write a Python function called `gcd` that takes in two integer arguments `a` and `b`, returns their greatest common divisor using Euclid's algorithm, and handles both positive and negative values correctly.\nTo compute the greatest common divisor (GCD) of two integers using Euclid's algorithm, we need to follow these steps:\n\n1. If either `a` or `b` is zero, then the GCD is equal to the non-zero number.\n2. Otherwise, repeatedly take the modulus operation on each pair of numbers (`remainder = a % b`) until one of them becomes zero.\n3. The remaining non-zero number after this process will be the GCD.\n\nWe also handle negative numbers by converting them into positive before performing the operations.\n\nHere is how you could implement such a function:\n\n```python\ndef gcd(a: int, b: int) -> int:\n    \"\"\"\n    Returns the greatest common divisor (GCD) of two integers `a` and `b`.\n\n    Args:\n        a (int): First integer argument.\n        b (int): Second integer argument.\n\n    Returns:\n        int: Greatest common divisor of `a` and `b`.\n    \"\"\"\n    if a == 0 or b == 0:\n        return abs(max(abs(a), abs(b)))\n\n    while b != 0:\n        remainder = a % b\n\n       "
        },
        {
            "prompt": "Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True",
            "code": "Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    return (n // 2 - 1) * 3 + 1\n\ndef count_even_numbers(n):\n    if n % 2 != 0:\n        raise ValueError(\"The input must be an integer\")\n    else:\n        return n // 2\n\ndef main():\n    assert is_equal_to_sum_even(count_even_numbers(8)) == True\n    print(is_equal_to_sum_even(count_even_numbers(9)))\n```\n\nTo test your code, you need to write a unit test case for this function. Here's how you could do it:\n\n```python\nimport unittest\n\nclass TestSumEvenNumbers(unittest.TestCase):\n    def setup(self):\n        self.n = 8\n\n    def test_is_equal_to_sum_even(self):\n        expected_result = True\n        actual_result = is_equal_to_sum_even(count_even_numbers(self.n))\n        self.assertEqual(actual_result, expected_result)\n\nif __name__ == \"__main__\":\n    unittest.main()\n```"
        },
        {
            "prompt": "Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'",
            "code": "Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five' \n```"
        },
        {
            "prompt": "A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5",
            "code": "A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n\n    Write code that implements this function.\nTo write such a function in Python, you can use an `if` statement to check whether `n` is a prime number. If it is, then return `x`, else return `y`.\n\nHere's how you could do it:\n\n```python\ndef x_or_y(x: int, y: int, n: int) -> int:\n    def is_prime(n):\n        if n < 2:\n            raise ValueError(\"Number must be greater than or equal to 2\")\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y\n```\n\nThis implementation uses a helper function `is_prime()` to determine whether `n` is a prime number. The main function checks if `n` is less than 2 by raising a `ValueError`. Then, it iterates from 2 up to the square root of `n` using the `range()` function. For each iteration, it checks if `i` divides evenly into `n` using the modulus operator `%`. If any division leaves no remainder (`% == 0`), then `n` is not a prime number, so we return `False` from the `is_prime()` function. Otherwise, after checking all possible divisors, we conclude that `n` is a prime number and return `x`."
        },
        {
            "prompt": "Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
            "code": "Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())'] \n```"
        },
        {
            "prompt": "Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]",
            "code": "Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"] if there are no other words with three consonants\n```\ndef select_words(s, n):\n    \"\"\"\n    Returns a list of all words from string `s` that contain exactly `n` consonants.\n\n    Args:\n        s (str): The input string containing one or more words separated by whitespace.\n        n (int): A non-negative integer representing the desired count of consonants per word.\n\n    Returns:\n        List[str]: A list of strings consisting of words from `s` that contain exactly `n` consonants. If the string `s` is empty, it will be returned as an empty list.\n    \"\"\"\n    # Split the string into individual words using split()\n    words = s.split()\n\n    # Iterate over each word in the list of words\n    result = []\n\n    for word in words:\n\n        # Count the number of consonants in the current word\n\n        consonant_count = sum(1 for c in word.lower() if not c.isalpha())\n\n        if consonant_count == n:\n\n            result.append(word)\n\n    return result\n```"
        },
        {
            "prompt": "Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1",
            "code": "Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n```\ndef triangle_area(a: int, b: int, c: int) -> float:\n    pass\n```"
        },
        {
            "prompt": "Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)",
            "code": "Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)  # Zero cannot be considered for either category\n```\n```python\ndef largest_smallest_integers(lst):\n    if not lst:  # Empty list case\n        return (None, None)\n\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n\n    max_negative = min(negatives) if negatives else None\n\n    min_positive = max(positives) if positives else None\n\n    return (max_negative, min_positive)\n```\n\nThis implementation uses list comprehensions to filter out the negative and positive numbers from the input list. It then finds the maximum among the negative numbers using `min()` with an empty list as the argument when all elements are non-negative. Similarly, it finds the minimum among the positive numbers using `max()` with an empty list as the argument when all elements are non-positive. Finally, it returns a tuple containing these two values."
        },
        {
            "prompt": "In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.",
            "code": "In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty. You can assume that both lists have at least one element.\n\nTo solve this problem, we need to understand how exchanging elements affects the parity (even or odd) of each element in the given lists. When we swap an element from lst1 with an element from lst2, if either element was originally even, then after swapping, their parities remain unchanged because they are just being swapped. However, if one element was even and the other was odd before the swap, then after swapping, the even element becomes odd and vice versa.\n\nTherefore, our goal is to find out if there exists a way to rearrange the elements such that every element in lst1 has been made even by swapping with some element in lst2. To achieve this, we should focus on checking for any pair of elements where one is even and the other is odd. In such cases, we cannot guarantee that both elements become even through swapping; instead, exactly one of them would change its parity.\n\nHere's how we can approach solving this problem:\n\n- We'll iterate over each element in lst1 and check if it is even or not.\n- Similarly, we'll do the same for lst2.\n- Then, we'll compare these values across the two lists to identify pairs of elements where one is even and the other is odd.\n- Finally, we'll determine if there exists a valid arrangement of swaps that makes all elements in lst1 even.\n\nLet's write code to accomplish this task:\n\n```python\ndef exchange(lst1: list[int], lst2: list[int]) -> str:\n    \"\"\"\n    Determines if it is possible to perform an exchange of elements between lst1 and lst2 to make lst1 a list of only even numbers.\n    Returns 'YES' if it is possible, otherwise returns 'NO'.\n    \"\"\"\n    # Check if there exist any pairs of elements where one is even and the other is odd\n    for i in range(len(lst1)):\n        for j in range(i + 1, len(lst1)):\n            if (lst1[i] % 2 == 0 and lst1[j] % 2 != 0):\n                break\n\n    else:\n        for i in range(len(lst1)):\n            for j in range(i + 1, len(lst1)):\n                if (lst1[i] % 2 == 0 and lst1[j] % 2 != 0):\n                    continue\n                elif (lst1[i] % 2 != "
        },
        {
            "prompt": "For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)",
            "code": "For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)"
        },
        {
            "prompt": "returns encoded string by cycling groups of three characters.",
            "code": "returns encoded string by cycling groups of three characters. For example, \"abcd\" becomes \"abc\", and \"1234567890\" becomes \"123 456 789 0\". If the input is not a multiple of three in length, pad it with spaces to make its length a multiple of three.\n\nWrite a Python function `encode_string` that takes an input string as argument and returns the encoded version.\nTo encode a string into chunks of three characters each, you can use list comprehension or generator expressions to iterate over the input string in steps of three characters. You'll also need to handle cases where the input string's length isn't a multiple of three by padding it with spaces before encoding.\n\nHere's how you could implement this:\n\n```python\ndef encode_string(s: str) -> str:\n    if len(s) % 3 != 0:\n        s += ' '.join([''] * (3 - len(s) % 3))\n    return ''.join([s[i:i+3] for i in range(0, len(s), 3)])\n```\n\nThe code first checks whether the input string has a length that's a multiple of three using modulo operator (`%`). If not, it pads the string with spaces until its length is a multiple of three using `''.join([''] * (3 - len(s) % 3))`. Then, it encodes the padded string by slicing every three-character chunk starting from index zero using a list comprehension `[s[i:i+3] for i in range(0, len(s), 3)]`.\n\nThis implementation ensures that the output string always contains exactly two parts separated by space, regardless of the original input string's format."
        },
        {
            "prompt": "Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n",
            "code": "Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n```\n\nWrite a Python function `evaluate_polynomial` that takes in two arguments: the list of coefficients and an integer value for x. The function should evaluate the given polynomial at the specified value of x.\n\nYour code should pass the following test case:\n```python\ncoefficients = [3, 4]\nx = 5\n\nassert evaluate_polynomial(coefficients, x) == 79\n```\nHere's how you can implement this:\n\n```python\ndef evaluate_polynomial(coefficients, x):\n    result = 0\n    for i, coeff in enumerate(coefficients):\n        if i > len(result):\n            raise ValueError(\"Coefficients must be longer than or equal to length of x\")\n        result += coeff * (x ** i)\n    return result\n```"
        },
        {
            "prompt": "This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]",
            "code": "This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5] \n```"
        }
    ]
}