{
    "base_results": [
        {
            "prompt": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n",
            "code": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_2(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_2('xyzXYZ')\n    3\n    >>> count_distinct_characters_2('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_3(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_3('xyzXYZ')\n    3\n    >>> count_distinct_characters_3('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_4(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_4('xyzXYZ')\n    3\n    >>> count_distinct_characters_4('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_5(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_5('xyzXYZ')\n    3\n    >>> count_distinct_characters_5('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_6(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_6('xyzXYZ')\n    3\n    >>> count_distinct_characters_6('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_7(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_7('xyzXYZ')\n    3\n    >>> count_distinct_characters_7('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_8(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_8('xyzXYZ')\n    3\n    >>> count_distinct_characters_8('Jerry')\n    4\n    \"\"\"\n\n"
        },
        {
            "prompt": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n",
            "code": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n/tests/test_01_basics.py\nimport pytest\n\nfrom basics import (\n    add,\n    add_all,\n    add_all_recursive,\n    add_all_recursive_2,\n    add_all_recursive_3,\n    add_all_recursive_4,\n    add_all_recursive_5,\n    add_all_recursive_6,\n    add_all_recursive_7,\n    add_all_recursive_8,\n    add_all_recursive_9,\n    add_all_recursive_10,\n    add_all_recursive_11,\n    add_all_recursive_12,\n    add_all_recursive_13,\n    add_all_recursive_14,\n    add_all_recursive_15,\n    add_all_recursive_16,\n    add_all_recursive_17,\n    add_all_recursive_18,\n    add_all_recursive_19,\n    add_all_recursive_20,\n    add_all_recursive_21,\n    add_all_recursive_22,\n    add_all_recursive_23,\n    add_all_recursive_24,\n    add_all_recursive_25,\n    add_all_recursive_26,\n    add_all_recursive_27,\n    add_all_recursive_28,\n    add_all_recursive_29,\n    add_all_recursive_30,\n    add_all_recursive_31,\n    add_all_recursive_32,\n    add_all_recursive_33,\n    add_all_recursive_34,\n    add_all_recursive_35,\n    add_all_recursive_36,\n    add_all_recursive_37,\n    add_all_recursive_38,\n    add_all_recursive_39,\n    add_all_recursive_40,\n    add_all_recursive_41,\n    add_all_recursive_42,\n    add_all_recursive_43,\n    add_all_recursive_44,\n    add_all_recursive_45,\n    add_all_recursive_46,\n    add_all_recursive_47,\n    add_all_recursive_48,\n    add_all_recursive_49,\n    add_all"
        },
        {
            "prompt": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n",
            "code": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n\ndef smallest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the smallest number that divides n evenly, larger than n\n    >>> smallest_divisor(15)\n    15\n    \"\"\"\n\ndef is_prime(n: int) -> bool:\n    \"\"\" For a given number n, determine if n is prime\n    >>> is_prime(15)\n    False\n    \"\"\"\n\ndef is_perfect(n: int) -> bool:\n    \"\"\" For a given number n, determine if n is perfect\n    >>> is_perfect(15)\n    False\n    \"\"\"\n\ndef is_abundant(n: int) -> bool:\n    \"\"\" For a given number n, determine if n is abundant\n    >>> is_abundant(15)\n    False\n    \"\"\"\n\ndef is_deficient(n: int) -> bool:\n    \"\"\" For a given number n, determine if n is deficient\n    >>> is_deficient(15)\n    False\n    \"\"\"\n\ndef is_triangular(n: int) -> bool:\n    \"\"\" For a given number n, determine if n is triangular\n    >>> is_triangular(15)\n    False\n    \"\"\"\n\ndef is_square(n: int) -> bool:\n    \"\"\" For a given number n, determine if n is square\n    >>> is_square(15)\n    False\n    \"\"\"\n\ndef is_pentagonal(n: int) -> bool:\n    \"\"\" For a given number n, determine if n is pentagonal\n    >>> is_pentagonal(15)\n    False\n    \"\"\"\n\ndef is_hexagonal(n: int) -> bool:\n    \"\"\" For a given number n, determine if n is hexagonal\n    >>> is_hexagonal(15)\n    False\n    \"\"\"\n\ndef is_heptagonal(n: int) -> bool:\n    \"\"\" For a given number n, determine if n is heptagonal\n    >>> is_heptagonal(15)\n    False\n    \"\"\"\n\ndef is_octagonal(n: int) -> bool:\n    \"\"\" For a given number n, determine if n is octagonal\n    >>> is_octagonal(15)\n    False\n    \"\"\"\n\ndef is_nonagonal(n: int) -> bool:\n    \"\"\" For a given number n, determine"
        },
        {
            "prompt": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n",
            "code": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\ndef sort_numbers_2(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_2('three one five')\n    'one three five'\n    \"\"\"\n\ndef sort_numbers_3(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_3('three one five')\n    'one three five'\n    \"\"\"\n\ndef sort_numbers_4(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_4('three one five')\n    'one three five'\n    \"\"\"\n\ndef sort_numbers_5(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_5('three one five')\n    'one three five'\n    \"\"\"\n\ndef sort_numbers_6(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort"
        },
        {
            "prompt": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n",
            "code": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\ndef is_palindrome(word):\n    \"\"\"\n    Write a function which checks if the given word is a palindrome.\n    A palindrome is a word which reads the same backward as forward.\n\n    For example:\n    >>> is_palindrome('abba') == True\n    >>> is_palindrome('abbc') == False\n    \"\"\"\n\ndef is_prime(num):\n    \"\"\"\n    Write a function which checks if the given number is prime.\n    A prime number is a number which is divisible only by 1 and itself.\n\n    For example:\n    >>> is_prime(1) == False\n    >>> is_prime(2) == True\n    >>> is_prime(3) == True\n    >>> is_prime(4) == False\n    \"\"\"\n\ndef is_perfect(num):\n    \"\"\"\n    Write a function which checks if the given number is perfect.\n    A perfect number is a number which is equal to the sum of its divisors.\n    For example:\n    >>> is_perfect(6) == True\n    >>> is_perfect(28) == True\n    >>> is_perfect(10) == False\n    \"\"\"\n\ndef is_fibonacci(num):\n    \"\"\"\n    Write a function which checks if the given number is a Fibonacci number.\n    A Fibonacci number is a number which is equal to the sum of its two previous\n    numbers. For example:\n    >>> is_fibonacci(1) == True\n    >>> is_fibonacci(2) == True\n    >>> is_fibonacci(3) == True\n    >>> is_fibonacci(4) == False\n    \"\"\"\n\ndef is_armstrong(num):\n    \"\"\"\n    Write a function which checks if the given number is an Armstrong number.\n    An Armstrong number is a number which is equal to the sum of its digits\n    raised to the power of the number of digits. For example:\n    >>> is_armstrong(153) == True\n    >>> is_armstrong(154) == False\n    \"\"\"\n\ndef is_palindrome_prime(num):\n    \"\"\"\n    Write a function which checks if the given number is a palindrome prime.\n    A palindrome prime is a number which is a palindrome and a prime number.\n\n    For example:\n    >>> is_palindrome_prime(1) == False\n    >>> is_palindrome_prime(2) == False\n    >>> is_palindrome_"
        },
        {
            "prompt": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n",
            "code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = \"aeiou\"\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels:\n            return word[i]\n    return \"\"\n\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = \"aeiou\"\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels:\n            return word[i]\n    return \"\"\n\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL"
        },
        {
            "prompt": "\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n",
            "code": "\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,"
        },
        {
            "prompt": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n",
            "code": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than"
        },
        {
            "prompt": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n",
            "code": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_"
        },
        {
            "prompt": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n",
            "code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    class_name = class_name.lower()\n    class_name = class_name.upper()\n    class_name = class_name.replace(' ', '')\n    class_name = class_name.replace('_', '')\n    class_name = class_name.replace('(', '')\n    class_name = class_name.replace(')', '')\n    class_name = class_name.replace(':', '')\n    class_name = class_name.replace('\"', '')\n    class_name = class_name.replace(\"'\", '')\n    class_name = class_name.replace('!', '')\n    class_name = class_name.replace('?', '')\n    class_name = class_name.replace(',', '')\n    class_name = class_name.replace('.', '')\n    class_name = class_name.replace(';', '')\n    class_name = class_name.replace('=', '')\n    class_name = class_name.replace('+', '')\n    class_name = class_name.replace('-', '')\n    class_name = class_name.replace('*', '')\n    class_name = class_name."
        }
    ],
    "fine_tuned_results": [
        {
            "prompt": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n",
            "code": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n\n# Write your code here\n\n# Your code should pass the following assertions:\nassert count_distinct_characters('xyzXYZ') == 3\nassert count_distinct_characters('Jerry') == 4\nassert count_distinct_characters('Hello, world!') == 10\nassert count_distinct_characters('Python') == 6\nassert count_distinct_characters('Python is fun!') == 10\nassert count_distinct_characters('Python is fun!') == 10\nassert count_distinct_characters('Python is fun!') == 10\nassert count_distinct_characters('Python is fun!') == 10\nassert count_distinct_characters('Python is fun!') == 10\nassert count_distinct_characters('Python is fun!') == 10\nassert count_distinct_characters('Python is fun!') == 10\nassert count_distinct_characters('Python is fun!') == 10\nassert count_distinct_characters('Python is fun!') == 10\nassert count_distinct_characters('Python is fun!') == 10\nassert count_distinct_characters('Python is fun!') == 10\nassert count_distinct_characters('Python is fun!') == 10\nassert count_distinct_characters('Python is fun!') == 10\nassert count_distinct_characters('Python is fun!') == 10\nassert count_distinct_characters('Python is fun!') == 10\nassert count_distinct_characters('Python is fun!') == 10\nassert count_distinct_characters('Python is fun!') == 10\nassert count_distinct_characters('Python is fun!') == 10\nassert count_distinct_characters('Python is fun!') == 10\nassert count_distinct_characters('Python is fun!') == 10\nassert count_distinct_characters('Python is fun!') == 10\nassert count_distinct_characters('Python is fun!') == 10\nassert count_distinct_characters('Python is fun!') == 10\nassert count_distinct_characters('Python is fun!') == 10\nassert count_distinct_characters('Python is fun!') == 10\nassert count_distinct_characters('Python is fun!') == 10\nassert count_distinct_characters('Python is fun!') == 10\nassert count_distinct_"
        },
        {
            "prompt": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n",
            "code": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n/tests/test_utils.py\nimport pytest\n\n\ndef test_get_first_non_empty_string(get_first_non_empty_string):\n    \"\"\"\n    Test get_first_non_empty_string function\n    \"\"\"\n    assert get_first_non_empty_string([]) is None\n    assert get_first_non_empty_string(['']) is None\n    assert get_first_non_empty_string(['a']) == 'a'\n    assert get_first_non_empty_string(['', '']) is None\n    assert get_first_non_empty_string(['', 'a']) == 'a'\n    assert get_first_non_empty_string(['a', '']) == 'a'\n    assert get_first_non_empty_string(['a', 'b']) == 'a'\n    assert get_first_non_empty_string(['a', 'b', '']) == 'b'\n    assert get_first_non_empty_string(['a', 'b', 'c']) == 'a'\n    assert get_first_non_empty_string(['a', 'b', 'c', '']) == 'b'\n    assert get_first_non_empty_string(['a', 'b', 'c', 'd']) == 'a'\n    assert get_first_non_empty_string(['a', 'b', 'c', 'd', '']) == 'b'\n    assert get_first_non_empty_string(['a', 'b', 'c', 'd', 'e']) == 'a'\n    assert get_first_non_empty_string(['a', 'b', 'c', 'd', 'e', '']) == 'b'\n    assert get_first_non_empty_string(['a', 'b', 'c', 'd', 'e', 'f']) == 'a'\n    assert get_first_non_empty_string(['a', 'b', 'c', 'd', 'e', 'f', '']) == 'b'\n    assert get_first_non_empty_string(['a', 'b', 'c', 'd', 'e', 'f', 'g']) == 'a'\n    assert get_first_non_empty_string(['a', 'b', 'c', 'd', 'e', 'f', 'g', '']) == 'b'\n   "
        },
        {
            "prompt": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n",
            "code": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n#     if n % 2 == 0:\n#         return 2\n#     else:\n#         return 1\n    return max(i for i in range(1, n + 1) if n % i == 0)\n\ndef smallest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the smallest number that divides n evenly, larger than n\n    >>> smallest_divisor(15)\n    3\n    \"\"\"\n    return min(i for i in range(n + 1, 2 * n + 1) if i % n == 0)\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Check if a number is prime\n    >>> is_prime(15)\n    False\n    >>> is_prime(17)\n    True\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_perfect(n: int) -> bool:\n    \"\"\" Check if a number is perfect\n    >>> is_perfect(28)\n    True\n    >>> is_perfect(15)\n    False\n    \"\"\"\n    return sum(i for i in range(1, n) if n % i == 0) == n\n    # return sum(i for i in range(1, n) if n % i == 0) == n\n    # return sum(i for i in range(1, n) if n % i == 0) == n\n    # return sum(i for i in range(1, n) if n % i == 0) == n\n    # return sum(i for i in range(1, n) if n % i == 0) == n\n    # return sum(i for i in range(1, n) if n % i == 0) == n\n    # return sum(i for i in range(1, n) if n % i == 0) == n\n    # return sum(i for i in range(1, n) if n % i == 0) == n\n    # return sum(i for i in range(1, n) if n % i == 0) == n\n    # return sum(i for i in range(1, n) if n % i == 0) == n\n   "
        },
        {
            "prompt": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n",
            "code": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n#     numbers = numbers.split()\n#     numbers.sort()\n#     return''.join(numbers)\n    numbers = numbers.split()\n    numbers.sort()\n    return''.join(numbers)\n\ndef sort_numbers_2(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_2('three one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n    numbers.sort()\n    return''.join(numbers)\n    # return''.join(sorted(numbers))\n    # return''.join(sorted(numbers, key=int))\n    # return''.join(sorted(numbers, key=lambda x: int(x)))\n    # return''.join(sorted(numbers, key=lambda x: int(x.replace('zero', '0'))))\n    # return''.join(sorted(numbers, key=lambda x: int(x.replace('zero', '0'))))\n    # return''.join(sorted(numbers, key=lambda x: int(x.replace('zero', '0'))))\n    # return''.join(sorted(numbers, key=lambda x: int(x.replace('zero', '0'))))\n    # return''.join(sorted(numbers, key=lambda x: int(x.replace('zero', '0'))))\n    # return''.join(sorted(numbers, key=lambda x: int(x.replace('zero', '0'))))\n    # return''.join(sorted(numbers, key=lambda x: int(x.replace('zero', '0'))))\n    # return''.join(sorted(numbers, key=lambda x: int(x.replace('zero', '0'))))\n    # return''.join(sorted(numbers, key=lambda x: int(x.replace('zero', '0'))))\n    # return''.join(sorted(numbers, key=lambda x: int(x.replace('zero', '0'))))\n    # return''.join(sorted(numbers, key=lambda x"
        },
        {
            "prompt": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n",
            "code": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\ndef sort_by_points(games):\n    \"\"\"\n    Sort the given list of games by points.\n    \"\"\"\n    games.sort(key=lambda game: game.points, reverse=True)\n    return games\n\ndef sort_by_name(games):\n    \"\"\"\n    Sort the given list of games by name.\n    \"\"\"\n    games.sort(key=lambda game: game.name)\n    return games\n\ndef sort_by_date(games):\n    \"\"\"\n    Sort the given list of games by date.\n    \"\"\"\n    games.sort(key=lambda game: game.date)\n    return games\n\ndef sort_by_time(games):\n    \"\"\"\n    Sort the given list of games by time.\n    \"\"\"\n    games.sort(key=lambda game: game.time)\n    return games\n\ndef sort_by_location(games):\n    \"\"\"\n    Sort the given list of games by location.\n    \"\"\"\n    games.sort(key=lambda game: game.location)\n    return games\n\ndef sort_by_winner(games):\n    \"\"\"\n    Sort the given list of games by winner.\n    \"\"\"\n    games.sort(key=lambda game: game.winner)\n    return games\n\ndef sort_by_loser(games):\n    \"\"\"\n    Sort the given list of games by loser.\n    \"\"\"\n    games.sort(key=lambda game: game.loser)\n    return games\n\ndef sort_by_winner_points(games):\n    \"\"\"\n    Sort the given list of games by winner points.\n    \"\"\"\n    games.sort(key=lambda game: game.winner_points, reverse=True)\n    return games\n\ndef sort_by_loser_points(games):\n    \"\"\"\n    Sort the given list of games by loser points.\n    \"\"\"\n    games.sort(key=lambda game: game.loser_points, reverse=True)\n    return games\n\ndef sort_by_winner_time(games):\n    \"\"\"\n    Sort the given list of games by winner time.\n    \"\"\"\n    games.sort(key=lambda game: game.winner_time)\n    return games\n\ndef sort_by_loser_time(games):\n    \"\"\"\n    Sort the given list of games by loser time.\n    \"\"\"\n    games.sort(key=lambda game: game.loser_time)\n    return games\n\ndef sort_by_winner_location"
        },
        {
            "prompt": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n",
            "code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\ndef get_closest_vowel_index(word, index):\n    \"\"\"\n    Given a word and an index, return the index of the closest vowel to the right of the index.\n    If there are no vowels to the right, return -1.\n    \"\"\"\n    vowels = \"aeiou\"\n    for i in range(index, len(word)):\n        if word[i] in vowels:\n            return i\n    return -1\n\ndef get_closest_vowel_index_left(word, index):\n    \"\"\"\n    Given a word and an index, return the index of the closest vowel to the left of the index.\n    If there are no vowels to the left, return -1.\n    \"\"\"\n    vowels = \"aeiou\"\n    for i in range(index-1, -1, -1):\n        if word[i] in vowels:\n            return i\n    return -1\n\ndef get_closest_vowel_index_right(word, index):\n    \"\"\"\n    Given a word and an index, return the index of the closest vowel to the right of the index.\n    If there are no vowels to the right, return -1.\n    \"\"\"\n    vowels = \"aeiou\"\n    for i in range(index+1, len(word)):\n        if word[i] in vowels:\n            return i\n    return -1\n\ndef get_closest_vowel_index_left(word, index):\n    \"\"\"\n    Given a word and an index, return the index of the closest vowel to the left of the index.\n    If there are no vowels to the left, return -1.\n    \"\"\"\n    vowels = \"aeiou\"\n    for i in range(index-1, -1, -1):\n        if word[i] in vowels:\n            return i\n    return -1\n\ndef get_closest_vowel_index_right(word, index):\n    \"\"\"\n    Given a word and an index, return the index of the closest vowel to the right of the index.\n    If there are no vowels to the right, return -1.\n    \"\"\"\n    vowels = \"aeiou\"\n    for i in range(index+1, len(word)):\n        if word[i] in vowels:\n            return i\n    return -1\n\ndef"
        },
        {
            "prompt": "\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n",
            "code": "\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\ndef get_max_value(lst):\n    \"\"\"\n    Given a list of numbers, return the maximum value in the list.\n    \"\"\"\n    max_value = lst[0]\n    for num in lst:\n        if num > max_value:\n            max_value = num\n    return max_value\n\ndef get_min_value(lst):\n    \"\"\"\n    Given a list of numbers, return the minimum value in the list.\n    \"\"\"\n    min_value = lst[0]\n    for num in lst:\n        if num < min_value:\n            min_value = num\n    return min_value\n\ndef get_sum(lst):\n    \"\"\"\n    Given a list of numbers, return the sum of all the numbers in the list.\n    \"\"\"\n    total = 0\n    for num in lst:\n        total += num\n    return total\n\ndef get_average(lst):\n    \"\"\"\n    Given a list of numbers, return the average of all the numbers in the list.\n    \"\"\"\n    total = 0\n    for num in lst:\n        total += num\n    return total / len(lst)\n\ndef get_median(lst):\n    \"\"\"\n    Given a list of numbers, return the median of all the numbers in the list.\n    \"\"\"\n    lst.sort()\n    if len(lst) % 2 == 0:\n        return (lst[int(len(lst) / 2)] + lst[int(len(lst) / 2) - 1]) / 2\n    else:\n        return lst[int(len(lst) / 2)]\n\ndef get_mode(lst):\n    \"\"\"\n    Given a list of numbers, return the mode of all the numbers in the list.\n    \"\"\"\n    mode = lst[0]\n    count = 1\n    for num in lst:\n        if num == mode:\n            count += 1\n        elif num!= mode:\n            if count > 1:\n                return mode\n            else:\n                mode = num\n                count = 1\n    return mode\n\ndef get_range(lst):\n    \"\"\"\n    Given a list of numbers, return the range of all the numbers in the list.\n    \"\"\"\n    return get_max_value(lst) - get_min_value(lst)\n\ndef get_variance(lst):\n    \"\"\"\n    Given a list of numbers, return the variance of all the numbers in the list.\n    \"\"\"\n    avg = get_average(lst)"
        },
        {
            "prompt": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n",
            "code": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n\ndef get_max_freq(lst):\n    \"\"\"\n    Given a list of integers, return the maximum frequency of any integer in the list.\n    \"\"\"\n    freq = {}\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return max(freq.values())\n\ndef get_max_freq_num(lst):\n    \"\"\"\n    Given a list of integers, return the integer with the maximum frequency.\n    \"\"\"\n    freq = {}\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return max(freq, key=freq.get)\n\ndef get_max_freq_num_with_freq(lst):\n    \"\"\"\n    Given a list of integers, return the integer with the maximum frequency and its frequency.\n    \"\"\"\n    freq = {}\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return max(freq, key=freq.get), freq[max(freq, key=freq.get)]\n    # return max(freq, key=freq.get), freq[max(freq, key=freq.get)]\n    # return max(freq, key=freq.get), freq[max(freq, key=freq.get)]\n    # return max(freq, key=freq.get), freq[max(freq, key=freq.get)]\n    # return max(freq, key=freq.get), freq[max(freq, key=freq.get)]\n    # return max(freq, key=freq.get), freq[max(freq, key=freq.get)]\n    # return max(freq, key=freq.get), freq[max(freq, key=freq.get)]\n    # return max(freq, key=freq.get), freq[max(freq, key=freq.get)]\n    # return max(freq, key=freq.get), freq[max(freq, key=freq.get)]\n    # return max(freq, key=freq.get), freq[max(freq, key=freq.get)]\n    # return max(freq, key=freq.get), freq[max(freq, key=freq.get)]\n    # return max(freq, key=freq"
        },
        {
            "prompt": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n",
            "code": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n# Your code here\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n    pass\n\n\ndef is_palindrome(s):\n    \"\"\"Return true if a string is a palindrome, and false otherwise.\n    >>> is_palindrome(\"racecar\")\n    True\n    >>> is_palindrome(\"radar\")\n    True\n    >>> is_palindrome(\"hello\")\n    False\n    >>> is_palindrome(\"tacocat\")\n    True\n    >>> is_palindrome(\"hannah\")\n    True\n    >>> is_palindrome(\"hannah\")\n    True\n    >>> is_palindrome(\"hannah\")\n    True\n    >>> is_palindrome(\"hannah\")\n    True\n    >>> is_palindrome(\"hannah\")\n    True\n    >>> is_palindrome(\"hannah\")\n    True\n    >>> is_palindrome(\"hannah\")\n    True\n    >>> is_palindrome(\"hannah\")\n    True\n    >>> is_palindrome(\"hannah\")\n    True\n    >>> is_palindrome(\"hannah\")\n    True\n    >>> is_palindrome(\"hannah\")\n    True\n    >>> is_palindrome(\"hannah\")\n    True\n    >>> is_palindrome(\"hannah\")\n    True\n    >>> is_palindrome(\"hannah\")\n    True\n    >>> is_palindrome(\"hannah\")\n    True\n    >>> is_palindrome(\"hannah\")\n    True\n    >>> is_palindrome(\"hannah\")\n    True\n    >>> is_palindrome(\"hannah\")\n    True\n    >>> is_palindrome(\"hannah\")\n    True\n    >>> is_palindrome(\"hannah\")\n    True\n    >>> is_palindrome(\"hannah\")\n    True\n    >>> is_palindrome(\"hannah\")\n    True\n    >>> is_palindrome(\"hannah\")\n    True\n    >>> is_palindrome(\"hannah\")\n    True\n    >>> is_palindrome(\"hannah\")\n    True\n    >>> is_palindrome(\"hannah\")\n    True\n    >>> is_palindrome(\"hannah\")\n    True\n    >>> is_palindrome(\"hannah\")\n    True\n    >>> is_palindrome(\"hannah\")\n    True\n    >>> is_palindrome(\"hannah\")\n    True\n    >>> is_palindrome(\"h"
        },
        {
            "prompt": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n",
            "code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n\n# Write your code here\n    class_name = class_name.lower()\n    extensions = [extension.lower() for extension in extensions]\n    extensions.sort(key=lambda x: (-len(x), x))\n    for extension in extensions:\n        if extension.startswith(class_name):\n            return class_name + '.' + extension\n    return class_name + '.base'\n\nif __name__ == '__main__':\n    class_name = input()\n    extensions = input().split()\n    print(Strongest_Extension(class_name, extensions))/Python/100_days_of_code/day_1/day_1_1.py\n# Write a Python function that takes a string as input and returns a list of all the unique characters in the string.\n# The function should ignore any whitespace characters and return a list of the unique characters in the string in the same order as they appear in the input string.\n# For example, if the input string is \"Hello, World!\", the function should return ['H', 'e', 'l', 'o', ',','', 'W', 'r', 'd', '!'].\ndef get_unique_chars(string):\n    \"\"\"\n    Get all unique characters in a string.\n    \"\"\"\n    unique_chars = []\n    for char in string:\n        if char not in unique_chars:\n            unique_chars.append(char)\n    return unique_chars\n\n\ndef get_unique_words(string):\n    \"\"\"\n    Get all unique words in a string.\n    \"\"\"\n    unique_words = []\n    for word in string.split():\n        if word not in unique_words:\n            unique_words.append(word)\n    return unique_words\n\n\ndef get_unique_lines(string):\n    \"\"\"\n    Get all unique lines in a string.\n    \"\"\"\n    unique_lines = []\n    for line in string.split('\\n'):\n        if line not in unique_lines:\n            unique_lines.append(line)\n    return unique_lines\n\n\ndef get_unique_words_and_lines(string):\n    \"\"\"\n    Get all unique words and lines in a string.\n    \"\"\"\n    unique_words_and_lines = []\n    for word in get_unique_words(string):\n        if word not in unique_words_and_lines:\n            unique_words_and_lines.append(word)\n    for line in"
        }
    ]
}